---
- name: "Neovim: ensure Neovim - clone"
  ansible.builtin.git:
    repo: https://github.com/neovim/neovim.git
    dest: ~/repos/neovim
    force: true
    single_branch: true

- name: "Neovim: ensure neovim build dependencies"
  become: true
  ansible.builtin.package:
    state: present
    name:
      - cmake
      - ninja

- name: "Neovim: apply patches to neovim"
  ansible.builtin.command: git apply ~/dotfiles/assets/patches/nvim/{{ item.patch_filename }}
  args:
    chdir: ~/repos/neovim
  loop:
    - { patch_filename: folds.patch }
    - { patch_filename: max_count_limit.patch }
  changed_when: false

- name: "Neovim: ensure neovim - build"
  ansible.builtin.command: make
  environment:
    CMAKE_BUILD_TYPE: RelWithDebInfo
  args:
    chdir: ~/repos/neovim
    creates: ~/repos/neovim/build/bin/nvim

- name: "Neovim: ensure symlink neovim"
  ansible.builtin.file:
    src: ~/repos/neovim/build/bin/nvim
    dest: ~/bin/nvim
    state: link

- name: "Neovim: setup startup script"
  ansible.builtin.blockinfile:
    dest: "{{ item.script }}"
    create: true
    marker: "## {mark} ANSIBLE MANAGED BLOCK - SETUP NEOVIM"
    mode: "744"
    block: |
      {% if 'bashrc' in item.script %}
      export VIMRUNTIME="$HOME/repos/neovim/runtime"
      {% elif 'setup_bashrc.fish' in item.script %}
      set -gx VIMRUNTIME "$HOME/repos/neovim/runtime"
      {% endif %}
  loop:
    - { script: ~/.bashrc }
    - { script: ~/.config/fish/conf.d/setup_bashrc.fish }
