---
- name: "[archlinux] Setup backup tools: ensure packages"
  become: true
  ansible.builtin.package:
    state: present
    name: borg

# https://borgbackup.readthedocs.io/en/stable/quickstart.html#pitfalls-with-shell-variables-and-environment-variables
- name: "[archlinux] Setup backup tools: ensure borg env variables in sudoers file"
  become: true
  ansible.builtin.blockinfile:
    dest: /etc/sudoers
    marker: "## {mark} ANSIBLE MANAGED BLOCK - SETUP BORG"
    block: Defaults env_keep += "BORG_*"
    validate: visudo -cf %s

- name: "[archlinux] Setup backup tools: init borg repos"
  ansible.builtin.command: borg init --encryption=keyfile '{{ item.borg_repo }}'
  environment:
    BORG_PASSCOMMAND: gpg --decrypt {{ ansible_env.HOME }}/secrets/{{ item.encrypted_passphrase_file }}
  loop: "{{ borg_init_repos }}"
  changed_when: false
  register: result
  failed_when:
    - '"stderr" in result'
    - '"Connection refused" not in result.stderr'
    - '"A repository already exists" not in result.stderr'
    - '"gpg: encrypted with" not in result.stderr'
    - '"The parent path of the repo directory" not in result.stderr' # fixes HDD drives not being available

- name: "[archlinux] Setup backup tools: create backup scripts from template"
  ansible.builtin.template:
    src: ~/dotfiles/assets/scripts/backup/borg_backup_jinja_template.backup.sh
    dest: ~/bin/{{ item.name }}.backup.sh
    mode: "744"
  vars:
    borg_repo: "{{ item.repo }}"
    borg_pass: "{{ item.pass }}"
    files: "{{ item.files }}"
  loop:
    - { name: autogenerated-dev1-config-files, repo: "{{ dev1_config_files_borg_repo }}", pass: staunch4647.gpg, files: "{{ config_files_backup_env }}" }
    - { name: autogenerated-dev1-PKM, repo: "{{ dev1_pkm_borg_repo }}", pass: feed4999.gpg, files: "{{ pkm_backup_env }}" }
    - { name: autogenerated-dev1-notes, repo: "{{ dev1_notes_borg_repo }}", pass: clench9629.gpg, files: "{{ notes_backup_env }}" }
    - { name: autogenerated-dev2-config-files, repo: "{{ dev2_config_files_borg_repo }}", pass: staunch4647.gpg, files: "{{ config_files_backup_env }}" }
    - { name: autogenerated-dev2-PKM, repo: "{{ dev2_pkm_borg_repo }}", pass: feed4999.gpg, files: "{{ pkm_backup_env }}" }
    - { name: autogenerated-dev2-notes, repo: "{{ dev2_notes_borg_repo }}", pass: clench9629.gpg, files: "{{ notes_backup_env }}" }
    - { name: autogenerated-dev3-config-files, repo: "{{ dev3_config_files_borg_repo }}", pass: staunch4647.gpg, files: "{{ config_files_backup_env }}" }
    - { name: autogenerated-dev3-PKM, repo: "{{ dev3_pkm_borg_repo }}", pass: feed4999.gpg, files: "{{ pkm_backup_env }}" }
    - { name: autogenerated-dev3-notes, repo: "{{ dev3_notes_borg_repo }}", pass: clench9629.gpg, files: "{{ notes_backup_env }}" }

- name: "[archlinux] Setup backup tools: ensure borg backup timer"
  ansible.builtin.systemd_service:
    scope: user
    name: "{{ item.service }}.timer"
    state: started
    enabled: true
    masked: false
  loop:
    - { service: every-hour-backup@dev1-config-files }
    - { service: every-8-hours-backup@dev1-PKM }
    - { service: every-4-hours-backup@dev1-notes }
    - { service: every-hour-backup@dev2-config-files }
    - { service: every-8-hours-backup@dev2-PKM }
    - { service: every-4-hours-backup@dev2-notes }
    - { service: every-hour-backup@dev3-config-files }
    - { service: every-8-hours-backup@dev3-PKM }
    - { service: every-4-hours-backup@dev3-notes }
