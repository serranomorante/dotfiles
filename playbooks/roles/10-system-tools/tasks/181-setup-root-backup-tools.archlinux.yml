---
- block:
    - name: "[archlinux] Setup root backup tools: init borg root repos"
      become: true
      ansible.builtin.command: borg init --encryption=keyfile '{{ item.repo }}'
      environment:
        BORG_PASSCOMMAND: gpg --homedir '{{ ansible_env.HOME }}/.gnupg' --decrypt {{ ansible_env.HOME }}/secrets/{{ item.pass_file }}
      loop: "{{ archlinux_borg_root_repos_env }}"
      changed_when: false
      register: result

    - name: "[archlinux] Setup root backup tools: create backup scripts from template"
      become: true
      ansible.builtin.template:
        src: "{{ ansible_env.HOME }}/dotfiles/assets/scripts/backup/borg_backup_jinja_template.backup.sh"
        dest: "/usr/bin/{{ item.sh_template }}.backup.sh"
        mode: "744"
        owner: root
      vars:
        borg_repo: "{{ item.borg_repo }}"
        borg_pass: "{{ item.encrypted_passphrase_file }}"
        files: "{{ item.files }}"
      loop: "{{ archlinux_borg_root_repos_env }}"

    - name: "[archlinux] Setup root backup tools: copy root timers & services"
      become: true
      ansible.builtin.copy:
        src: "{{ ansible_env.HOME }}/dotfiles/assets/other/{{ item }}"
        dest: "/etc/systemd/system/{{ item }}"
        owner: root
        mode: "644"
      loop:
        - borg-root-backup@.service
        - every-8-hours-backup@.timer

    - name: "[archlinux] Setup root backup tools: ensure borg backup timer"
      become: true
      ansible.builtin.systemd_service:
        scope: system
        name: "{{ item.service }}.timer"
        state: started
        enabled: true
        masked: false
      loop:
        - { service: every-8-hours-backup@dev1-root }
        - { service: every-8-hours-backup@dev2-root }
        - { service: every-8-hours-backup@dev3-root }

    - name: "[archlinux] Setup database tools: ensure root-keyfiles backup folder"
      ansible.builtin.file:
        path: ~/secrets/backup-borg-root-keyfiles
        state: directory
        mode: "755"

    - name: "[archlinux] Setup root backup tools: backup keyfile"
      become: true
      ansible.builtin.command: >
        borg key export "{{ item.borg_repo }}"
        '{{ ansible_env.HOME }}/secrets/backup-borg-root-keyfiles/{{ item.borg_repo | regex_replace("[^A-Za-z0-9]", "_") }}'
      environment:
        BORG_PASSCOMMAND: gpg --homedir '{{ ansible_env.HOME }}/.gnupg' --decrypt {{ ansible_env.HOME }}/secrets/{{ item.encrypted_passphrase_file }}
      changed_when: false
      loop: "{{ archlinux_borg_root_repos_env }}"

    - name: "[archlinux] Setup root backup tools: register timestamp"
      ansible.builtin.command: "date +%Y-%m-%d%H-%M-%S"
      changed_when: false
      register: tstamp

    - name: "[archlinux] Setup root backup tools: archive the keyfiles"
      become: true
      ansible.builtin.shell: tar -czvf ../root_keyfiles-{{ user_os }}-{{ tstamp.stdout }}.tar.gz * --remove-files
      changed_when: false
      args:
        chdir: "{{ ansible_env.HOME }}/secrets/backup-borg-root-keyfiles"
  ignore_errors: true
